-- Copyright (c) 2021, United States Government, as represented by the
-- Administrator of the National Aeronautics and Space Administration.
--
-- All rights reserved.
--
-- The "ISAAC - Integrated System for Autonomous and Adaptive Caretaking
-- platform" software is licensed under the Apache License, Version 2.0
-- (the "License"); you may not use this file except in compliance with the
-- License. You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
-- WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
-- License for the specific language governing permissions and limitations
-- under the License.

-- Check that we have CUSTOM_RESOURCE_DIR set
resource_dir = os.getenv("CUSTOM_RESOURCE_DIR")
if resource_dir == nil then
  io.stderr:write("CUSTOM_RESOURCE_DIR not set, aborting.\n")
  os.exit()
end

-- Load the world configuration for the current context
world_name = os.getenv("ASTROBEE_WORLD")
if world_name == nil then
  io.stderr:write("ASTROBEE_WORLD not set, aborting.\n")
  os.exit()
end

mesh_file = resource_dir .. "/geometry/" .. world_name .. ".ply";

-- By default get the pose from EKF which uses a prior map and the IMU
ekf_state_topic             = "/gnc/ekf";
-- ekf_state_topic          = "";

-- The nav_cam_pose_topic is more reliable than ekf_state_topic
-- if you can afford to build a new map and relocalize
nav_cam_pose_topic          = "";
-- nav_cam_pose_topic          = "/loc/ml/features";

-- A backup topic to get the pose from, rarely used
ekf_pose_topic              = "";

-- Type of camera to texture, and its image topic

texture_cam_type  = "sci_cam";
texture_cam_topic = "/hw/cam_sci/compressed";

-- texture_cam_type  = "haz_cam";
-- texture_cam_topic = "/hw/depth_haz/extended/amplitude_int";

-- texture_cam_type  = "nav_cam";
-- texture_cam_topic = "/hw/cam_nav";

-- texture_cam_type  = "heat_cam";
-- texture_cam_topic = "/hw/cam_heat";

-- texture_cam_type  = "acoustics_cam";
-- texture_cam_topic = "/hw/cam_acoustics";

dist_between_processed_cams  = 0.10;
angle_between_processed_cams = 5.0;
max_iso_times_exposure       = 5.1;
sci_cam_exposure_correction  = true;

use_single_texture           = true;
pixel_size                   = 0.001;
num_threads                  = 48;

-- This is measured at full resolution, not the reduced resolution
-- used in calibration.
num_exclude_boundary_pixels = 0;

save_to_disk                = false;
