# ----------------------------------------------------------------------------------------------------
# ISAAC Data Interface
# ----------------------------------------------------------------------------------------------------
#
# How to run the ISAAC Data Interface using Docker Compose:
#
# 1. ./build.sh
#
#    This script will build every component defined in this docker-compose file.
#
# 2. ./run.sh
#
#    This script will launch both the IDI using docker-compose and the ISAAC Docker container.
#
# 3. ./status.sh
#
#    This script will help you debug the IDI and its various subsystems.
#
# 4. ./shutdown.sh
#
#    This script will shutdown both the IDI and the ISAAC Docker container.
#
# ----------------------------------------------------------------------------------------------------
# Important notes about this file
# ----------------------------------------------------------------------------------------------------
#
# 1. This file may contain more services than needed for the demo purposes,
#    such as those that replay bags or echo a ROS topic. I've marked them below
#    as essential and non-essential services.
#
# 2. The name of the network is important because it's used by some of the
#    build/run/etc scripts. If you change it, you'll have to change the
#    name in the scripts too.
#
# 3. Some data will persist between multiple runs of this system. If you'd like to
#    delete persistent data (such as the data in the IDI database), run:
#
#    docker-compose down -v
#
version: "2.1"
services:
  # --------------------------------------------------------------------------------------------------
  # Essential IDI Services
  # --------------------------------------------------------------------------------------------------
  iui_frontend:
    # This service serves the static content that represents
    # the frontend ISAAC data interface.
    #
    image: ${REMOTE}/isaac_user_interface_frontend
    hostname: iui_frontend
    container_name: iui_frontend
    ports:
      - "8080:8080"
    depends_on:
      - iui_backend
      - rosbridge
    networks:
      - isaac
    # uncomment the two lines below ONLY if you are actively developing
    # the IDI frontend and need fast reloads on code changes
    # volumes:
    #   - "./frontend:/app:ro"

  iui_backend:
    # This service serves the front-end by providing it with
    # historical telemetry that it retrieves from ROS bridge.
    #
    image: ${REMOTE}/isaac_user_interface_backend
    hostname: iui_backend
    container_name: iui_backend
    command: python /main.py
    volumes:
      - "${IUI_PATH:-.}/config.json:/config.json:ro"
    depends_on:
      - rosmaster
      - rosbridge
      - iui_arangodb
    ports:
      - "9091:9091"
    networks:
      - isaac
    links:
      - iui_arangodb

  iui_arangodb:
    # This service provides a database for the backend. The
    # backend uses this database to store ROS messages in JSON format.
    #
    image: arangodb:latest
    hostname: iui_arangodb
    container_name: iui_arangodb
    environment:
      ARANGO_ROOT_PASSWORD: isaac
    ports:
      - "8529:8529"
    volumes:
      - arangodb_data_container:/data/arangodb3
      - arangodb_apps_data_container:/data/arangodb3-apps
    networks:
      - isaac

  rosbridge:
    # This service will provide a bridge between ROS and the web through
    # a WebSocket open on port 9090.
    #
    # For more info, see:
    # http://wiki.ros.org/rosbridge_suite
    #
    image: ${REMOTE}/isaac_user_interface_rosbridge
    hostname: rosbridge
    container_name: rosbridge
    entrypoint: "/ros_entrypoint.sh"
    command: "roslaunch --wait /rosbridge/publishers.launch"
    ports:
      - "9090:9090"
    depends_on:
      - rosmaster
    environment:
      - ROS_MASTER_URI=http://rosmaster:11311
      - ROS_IP=172.19.0.8
    networks:
      isaac:
        ipv4_address: 172.19.0.8


# ----------------------------------------------------------------------------------------------------
# Docker Compose Volumes
# ----------------------------------------------------------------------------------------------------
volumes:
  idi_database_volume:
  arangodb_data_container:
  arangodb_apps_data_container:
